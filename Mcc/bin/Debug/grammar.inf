program : declaration-list

declaration-list : declaration temp1
temp1 : declaration temp1
temp1 : EMPTY

declaration : type-specifier ID temp6
temp6 : ;
temp6 : [ NUM ]
temp6 : ( params ) compound-stmt

var-declaration : type-specifier ID temp7
temp7 : ;
temp7 : [ NUM ]

type-specifier : int 
type-specifier : void

fun-declaration : type-specifier ID ( params ) compound-stmt

params : void temp13
temp13 : ID temp8 temp2
temp13 : EMPTY
	
param-list : param temp2
temp2 : , param temp2
temp2 : EMPTY

param : type-specifier ID temp8
temp8 : [ ]
temp8 : EMPTY
	
compound-stmt : { local-declarations statement-list }

local-declarations : var-declaration local-declarations
local-declarations : EMPTY
	
statement-list : statement statement-list
statement-list : EMPTY
	
statement : expression-stmt
statement : compound-stmt
statement : selection-stmt
statement : iteration-stmt
statement : return-stmt
	
expression-stmt : expression ;
expression-stmt : ;

selection-stmt : if ( expression ) statement temp9
temp9 : else statement
temp9 : EMPTY
	
iteration-stmt : while ( expression ) statement

return-stmt : return temp10
temp10 : ;
temp10 : expression ;

expression : var temp13
expression : ( expression ) temp4 temp3 temp12
expression : NUM temp4 temp3 temp12
expression : ID temp14 temp4 temp3 temp12
temp13 : = expression
temp13 : temp4 temp3 temp12

var : ID temp11
temp11 : [ expression ]
temp11 : EMPTY

simple-expression : additive-expression temp12
temp12 : relop additive-expression
temp12 : EMPTY
	
relop : <=
relop : <
relop : >
relop : >=
relop : ==
relop : !=
	
additive-expression : term temp3
temp3 : addop term temp3
temp3 : EMPTY
	
addop : +
addop : -
	
term : factor temp4
temp4 :mulop factor temp4
temp4 : EMPTY
	
mulop : *
mulop : /
	
factor : ( expression )
factor : NUM
factor : ID temp14
temp14 : temp11
temp14 : ( args )
	
call : ID ( args )

args : arg-list
args : EMPTY
	
arg-list : expression temp5
temp5 : , expression temp5
temp5 : EMPTY